swagger: '2.0'
info:
  version: 1.0.0
  title: testApi
  description: testApi
basePath: /api
paths:
  '/Messages/{id}/conversation':
    get:
      tags:
        - Message
      summary: Fetches belongsTo relation conversation.
      operationId: Message.prototype.__get__conversation
      parameters:
        - name: id
          in: path
          description: Message id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Conversation'
      deprecated: false
  /Messages:
    post:
      tags:
        - Message
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Message.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Message'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Message'
      deprecated: false
    patch:
      tags:
        - Message
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Message.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Message'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Message'
      deprecated: false
    put:
      tags:
        - Message
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Message.replaceOrCreate__put_Messages
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Message'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Message'
      deprecated: false
    get:
      tags:
        - Message
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Message.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Message'
      deprecated: false
  /Messages/replaceOrCreate:
    post:
      tags:
        - Message
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Message.replaceOrCreate__post_Messages_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Message'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Message'
      deprecated: false
  /Messages/upsertWithWhere:
    post:
      tags:
        - Message
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Message.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Message'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Message'
      deprecated: false
  '/Messages/{id}/exists':
    get:
      tags:
        - Message
      summary: Check whether a model instance exists in the data source.
      operationId: 'Message.exists__get_Messages_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Messages/{id}':
    head:
      tags:
        - Message
      summary: Check whether a model instance exists in the data source.
      operationId: 'Message.exists__head_Messages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Message
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Message.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Message'
      deprecated: false
    put:
      tags:
        - Message
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Message.replaceById__put_Messages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Message'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Message'
      deprecated: false
    delete:
      tags:
        - Message
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Message.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Message
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Message.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Message id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Message'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Message'
      deprecated: false
  '/Messages/{id}/replace':
    post:
      tags:
        - Message
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Message.replaceById__post_Messages_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Message'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Message'
      deprecated: false
  /Messages/findOne:
    get:
      tags:
        - Message
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Message.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Message'
      deprecated: false
  /Messages/update:
    post:
      tags:
        - Message
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Message.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Message'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Messages/count:
    get:
      tags:
        - Message
      summary: Count instances of the model matched by where from the data source.
      operationId: Message.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Messages/change-stream:
    post:
      tags:
        - Message
      summary: Create a change stream.
      operationId: Message.createChangeStream__post_Messages_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Message
      summary: Create a change stream.
      operationId: Message.createChangeStream__get_Messages_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Messages/greet:
    get:
      tags:
        - Message
      operationId: Message.greet
      parameters:
        - name: msg
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              greeting:
                type: string
      deprecated: false
  '/Products/{id}/category':
    get:
      tags:
        - Product
      summary: Fetches belongsTo relation category.
      operationId: Product.prototype.__get__category
      parameters:
        - name: id
          in: path
          description: Product id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
  /Products:
    post:
      tags:
        - Product
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Product.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
    patch:
      tags:
        - Product
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Product.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
    put:
      tags:
        - Product
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Product.replaceOrCreate__put_Products
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
    get:
      tags:
        - Product
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Product.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
      deprecated: false
  /Products/replaceOrCreate:
    post:
      tags:
        - Product
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Product.replaceOrCreate__post_Products_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
  /Products/upsertWithWhere:
    post:
      tags:
        - Product
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Product.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
  '/Products/{id}/exists':
    get:
      tags:
        - Product
      summary: Check whether a model instance exists in the data source.
      operationId: 'Product.exists__get_Products_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Products/{id}':
    head:
      tags:
        - Product
      summary: Check whether a model instance exists in the data source.
      operationId: 'Product.exists__head_Products_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Product
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Product.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
    put:
      tags:
        - Product
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Product.replaceById__put_Products_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
    delete:
      tags:
        - Product
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Product.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Product
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Product.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Product id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
  '/Products/{id}/replace':
    post:
      tags:
        - Product
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Product.replaceById__post_Products_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
  /Products/findOne:
    get:
      tags:
        - Product
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Product.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
  /Products/update:
    post:
      tags:
        - Product
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Product.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Products/count:
    get:
      tags:
        - Product
      summary: Count instances of the model matched by where from the data source.
      operationId: Product.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Products/change-stream:
    post:
      tags:
        - Product
      summary: Create a change stream.
      operationId: Product.createChangeStream__post_Products_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Product
      summary: Create a change stream.
      operationId: Product.createChangeStream__get_Products_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /News:
    post:
      tags:
        - News
      summary: Create a new instance of the model and persist it into the data source.
      operationId: News.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/News'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/News'
      deprecated: false
    patch:
      tags:
        - News
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: News.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/News'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/News'
      deprecated: false
    put:
      tags:
        - News
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: News.replaceOrCreate__put_News
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/News'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/News'
      deprecated: false
    get:
      tags:
        - News
      summary: Find all instances of the model matched by filter from the data source.
      operationId: News.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/News'
      deprecated: false
  /News/replaceOrCreate:
    post:
      tags:
        - News
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: News.replaceOrCreate__post_News_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/News'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/News'
      deprecated: false
  /News/upsertWithWhere:
    post:
      tags:
        - News
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: News.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/News'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/News'
      deprecated: false
  '/News/{id}/exists':
    get:
      tags:
        - News
      summary: Check whether a model instance exists in the data source.
      operationId: 'News.exists__get_News_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/News/{id}':
    head:
      tags:
        - News
      summary: Check whether a model instance exists in the data source.
      operationId: 'News.exists__head_News_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - News
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: News.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/News'
      deprecated: false
    put:
      tags:
        - News
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'News.replaceById__put_News_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/News'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/News'
      deprecated: false
    delete:
      tags:
        - News
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: News.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - News
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: News.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: News id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/News'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/News'
      deprecated: false
  '/News/{id}/replace':
    post:
      tags:
        - News
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'News.replaceById__post_News_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/News'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/News'
      deprecated: false
  /News/findOne:
    get:
      tags:
        - News
      summary: Find first instance of the model matched by filter from the data source.
      operationId: News.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/News'
      deprecated: false
  /News/update:
    post:
      tags:
        - News
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: News.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/News'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /News/count:
    get:
      tags:
        - News
      summary: Count instances of the model matched by where from the data source.
      operationId: News.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /News/change-stream:
    post:
      tags:
        - News
      summary: Create a change stream.
      operationId: News.createChangeStream__post_News_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - News
      summary: Create a change stream.
      operationId: News.createChangeStream__get_News_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Categories/{id}/products/{fk}':
    get:
      tags:
        - Category
      summary: Find a related item by id for products.
      operationId: Category.prototype.__findById__products
      parameters:
        - name: id
          in: path
          description: Category id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for products
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
    delete:
      tags:
        - Category
      summary: Delete a related item by id for products.
      operationId: Category.prototype.__destroyById__products
      parameters:
        - name: id
          in: path
          description: Category id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for products
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Category
      summary: Update a related item by id for products.
      operationId: Category.prototype.__updateById__products
      parameters:
        - name: id
          in: path
          description: Category id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for products
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
  '/Categories/{id}/products':
    get:
      tags:
        - Category
      summary: Queries products of Category.
      operationId: Category.prototype.__get__products
      parameters:
        - name: id
          in: path
          description: Category id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
      deprecated: false
    post:
      tags:
        - Category
      summary: Creates a new instance in products of this model.
      operationId: Category.prototype.__create__products
      parameters:
        - name: id
          in: path
          description: Category id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Product'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Product'
      deprecated: false
    delete:
      tags:
        - Category
      summary: Deletes all products of this model.
      operationId: Category.prototype.__delete__products
      parameters:
        - name: id
          in: path
          description: Category id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Categories/{id}/products/count':
    get:
      tags:
        - Category
      summary: Counts products of Category.
      operationId: Category.prototype.__count__products
      parameters:
        - name: id
          in: path
          description: Category id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Categories:
    post:
      tags:
        - Category
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Category.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
    patch:
      tags:
        - Category
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Category.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
    put:
      tags:
        - Category
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Category.replaceOrCreate__put_Categories
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
    get:
      tags:
        - Category
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Category.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Category'
      deprecated: false
  /Categories/replaceOrCreate:
    post:
      tags:
        - Category
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Category.replaceOrCreate__post_Categories_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
  /Categories/upsertWithWhere:
    post:
      tags:
        - Category
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Category.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
  '/Categories/{id}/exists':
    get:
      tags:
        - Category
      summary: Check whether a model instance exists in the data source.
      operationId: 'Category.exists__get_Categories_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Categories/{id}':
    head:
      tags:
        - Category
      summary: Check whether a model instance exists in the data source.
      operationId: 'Category.exists__head_Categories_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Category
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Category.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
    put:
      tags:
        - Category
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Category.replaceById__put_Categories_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
    delete:
      tags:
        - Category
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Category.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Category
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Category.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Category id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
  '/Categories/{id}/replace':
    post:
      tags:
        - Category
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Category.replaceById__post_Categories_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
  /Categories/findOne:
    get:
      tags:
        - Category
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Category.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Category'
      deprecated: false
  /Categories/update:
    post:
      tags:
        - Category
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Category.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Category'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Categories/count:
    get:
      tags:
        - Category
      summary: Count instances of the model matched by where from the data source.
      operationId: Category.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Categories/change-stream:
    post:
      tags:
        - Category
      summary: Create a change stream.
      operationId: Category.createChangeStream__post_Categories_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Category
      summary: Create a change stream.
      operationId: Category.createChangeStream__get_Categories_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Accounts/{id}/roles/{fk}':
    get:
      tags:
        - Account
      summary: Find a related item by id for roles.
      operationId: Account.prototype.__findById__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - Account
      summary: Delete a related item by id for roles.
      operationId: Account.prototype.__destroyById__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Account
      summary: Update a related item by id for roles.
      operationId: Account.prototype.__updateById__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
  '/Accounts/{id}/roles/rel/{fk}':
    put:
      tags:
        - Account
      summary: Add a related item by id for roles.
      operationId: Account.prototype.__link__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RoleMapping'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RoleMapping'
      deprecated: false
    delete:
      tags:
        - Account
      summary: Remove the roles relation to an item by id.
      operationId: Account.prototype.__unlink__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    head:
      tags:
        - Account
      summary: Check the existence of roles relation to an item by id.
      operationId: Account.prototype.__exists__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for roles
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: boolean
      deprecated: false
  '/Accounts/{id}/accessTokens/{fk}':
    get:
      tags:
        - Account
      summary: Find a related item by id for accessTokens.
      operationId: Account.prototype.__findById__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
    delete:
      tags:
        - Account
      summary: Delete a related item by id for accessTokens.
      operationId: Account.prototype.__destroyById__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Account
      summary: Update a related item by id for accessTokens.
      operationId: Account.prototype.__updateById__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
  '/Accounts/{id}/roles':
    get:
      tags:
        - Account
      summary: Queries roles of Account.
      operationId: Account.prototype.__get__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'
      deprecated: false
    post:
      tags:
        - Account
      summary: Creates a new instance in roles of this model.
      operationId: Account.prototype.__create__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Role'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Role'
      deprecated: false
    delete:
      tags:
        - Account
      summary: Deletes all roles of this model.
      operationId: Account.prototype.__delete__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Accounts/{id}/roles/count':
    get:
      tags:
        - Account
      summary: Counts roles of Account.
      operationId: Account.prototype.__count__roles
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Accounts/{id}/accessTokens':
    get:
      tags:
        - Account
      summary: Queries accessTokens of Account.
      operationId: Account.prototype.__get__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccountToken'
      deprecated: false
    post:
      tags:
        - Account
      summary: Creates a new instance in accessTokens of this model.
      operationId: Account.prototype.__create__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
    delete:
      tags:
        - Account
      summary: Deletes all accessTokens of this model.
      operationId: Account.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Accounts/{id}/accessTokens/count':
    get:
      tags:
        - Account
      summary: Counts accessTokens of Account.
      operationId: Account.prototype.__count__accessTokens
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Accounts:
    post:
      tags:
        - Account
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Account.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    patch:
      tags:
        - Account
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Account.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    put:
      tags:
        - Account
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Account.replaceOrCreate__put_Accounts
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    get:
      tags:
        - Account
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Account.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Account'
      deprecated: false
  /Accounts/replaceOrCreate:
    post:
      tags:
        - Account
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Account.replaceOrCreate__post_Accounts_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  /Accounts/upsertWithWhere:
    post:
      tags:
        - Account
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Account.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  '/Accounts/{id}/exists':
    get:
      tags:
        - Account
      summary: Check whether a model instance exists in the data source.
      operationId: 'Account.exists__get_Accounts_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Accounts/{id}':
    head:
      tags:
        - Account
      summary: Check whether a model instance exists in the data source.
      operationId: 'Account.exists__head_Accounts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Account
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Account.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    put:
      tags:
        - Account
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Account.replaceById__put_Accounts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
    delete:
      tags:
        - Account
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Account.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Account
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Account.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  '/Accounts/{id}/replace':
    post:
      tags:
        - Account
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Account.replaceById__post_Accounts_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  /Accounts/findOne:
    get:
      tags:
        - Account
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Account.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  /Accounts/update:
    post:
      tags:
        - Account
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Account.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Account'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Accounts/count:
    get:
      tags:
        - Account
      summary: Count instances of the model matched by where from the data source.
      operationId: Account.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Accounts/change-stream:
    post:
      tags:
        - Account
      summary: Create a change stream.
      operationId: Account.createChangeStream__post_Accounts_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Account
      summary: Create a change stream.
      operationId: Account.createChangeStream__get_Accounts_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Accounts/login:
    post:
      tags:
        - Account
      summary: Login a user with username/email and password.
      operationId: Account.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /Accounts/logout:
    post:
      tags:
        - Account
      summary: Logout a user with access token.
      operationId: Account.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Accounts/{id}/verify':
    post:
      tags:
        - Account
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: Account.prototype.verify
      parameters:
        - name: id
          in: path
          description: Account id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Accounts/confirm:
    get:
      tags:
        - Account
      summary: Confirm a user registration with identity verification token.
      operationId: Account.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Accounts/reset:
    post:
      tags:
        - Account
      summary: Reset password for a user with email.
      operationId: Account.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Accounts/change-password:
    post:
      tags:
        - Account
      summary: Change a user's password.
      operationId: Account.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Accounts/reset-password:
    post:
      tags:
        - Account
      summary: Reset user's password via a password-reset token.
      operationId: Account.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/AccountTokens/{id}/user':
    get:
      tags:
        - AccountToken
      summary: Fetches belongsTo relation user.
      operationId: AccountToken.prototype.__get__user
      parameters:
        - name: id
          in: path
          description: AccountToken id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Account'
      deprecated: false
  /AccountTokens:
    post:
      tags:
        - AccountToken
      summary: Create a new instance of the model and persist it into the data source.
      operationId: AccountToken.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
    patch:
      tags:
        - AccountToken
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: AccountToken.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
    put:
      tags:
        - AccountToken
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: AccountToken.replaceOrCreate__put_AccountTokens
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
    get:
      tags:
        - AccountToken
      summary: Find all instances of the model matched by filter from the data source.
      operationId: AccountToken.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccountToken'
      deprecated: false
  /AccountTokens/replaceOrCreate:
    post:
      tags:
        - AccountToken
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: AccountToken.replaceOrCreate__post_AccountTokens_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
  /AccountTokens/upsertWithWhere:
    post:
      tags:
        - AccountToken
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: AccountToken.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
  '/AccountTokens/{id}/exists':
    get:
      tags:
        - AccountToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'AccountToken.exists__get_AccountTokens_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/AccountTokens/{id}':
    head:
      tags:
        - AccountToken
      summary: Check whether a model instance exists in the data source.
      operationId: 'AccountToken.exists__head_AccountTokens_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - AccountToken
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: AccountToken.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
    put:
      tags:
        - AccountToken
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'AccountToken.replaceById__put_AccountTokens_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
    delete:
      tags:
        - AccountToken
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: AccountToken.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - AccountToken
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: AccountToken.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: AccountToken id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
  '/AccountTokens/{id}/replace':
    post:
      tags:
        - AccountToken
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'AccountToken.replaceById__post_AccountTokens_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
  /AccountTokens/findOne:
    get:
      tags:
        - AccountToken
      summary: Find first instance of the model matched by filter from the data source.
      operationId: AccountToken.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccountToken'
      deprecated: false
  /AccountTokens/update:
    post:
      tags:
        - AccountToken
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: AccountToken.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AccountToken'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /AccountTokens/count:
    get:
      tags:
        - AccountToken
      summary: Count instances of the model matched by where from the data source.
      operationId: AccountToken.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /AccountTokens/change-stream:
    post:
      tags:
        - AccountToken
      summary: Create a change stream.
      operationId: AccountToken.createChangeStream__post_AccountTokens_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - AccountToken
      summary: Create a change stream.
      operationId: AccountToken.createChangeStream__get_AccountTokens_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Conversations/{id}/messages/{fk}':
    get:
      tags:
        - Conversation
      summary: Find a related item by id for messages.
      operationId: Conversation.prototype.__findById__messages
      parameters:
        - name: id
          in: path
          description: Conversation id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for messages
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Message'
      deprecated: false
    delete:
      tags:
        - Conversation
      summary: Delete a related item by id for messages.
      operationId: Conversation.prototype.__destroyById__messages
      parameters:
        - name: id
          in: path
          description: Conversation id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for messages
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Conversation
      summary: Update a related item by id for messages.
      operationId: Conversation.prototype.__updateById__messages
      parameters:
        - name: id
          in: path
          description: Conversation id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for messages
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Message'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Message'
      deprecated: false
  '/Conversations/{id}/messages':
    get:
      tags:
        - Conversation
      summary: Queries messages of Conversation.
      operationId: Conversation.prototype.__get__messages
      parameters:
        - name: id
          in: path
          description: Conversation id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Message'
      deprecated: false
    post:
      tags:
        - Conversation
      summary: Creates a new instance in messages of this model.
      operationId: Conversation.prototype.__create__messages
      parameters:
        - name: id
          in: path
          description: Conversation id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Message'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Message'
      deprecated: false
    delete:
      tags:
        - Conversation
      summary: Deletes all messages of this model.
      operationId: Conversation.prototype.__delete__messages
      parameters:
        - name: id
          in: path
          description: Conversation id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Conversations/{id}/messages/count':
    get:
      tags:
        - Conversation
      summary: Counts messages of Conversation.
      operationId: Conversation.prototype.__count__messages
      parameters:
        - name: id
          in: path
          description: Conversation id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Conversations:
    post:
      tags:
        - Conversation
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Conversation.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Conversation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Conversation'
      deprecated: false
    patch:
      tags:
        - Conversation
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Conversation.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Conversation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Conversation'
      deprecated: false
    put:
      tags:
        - Conversation
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Conversation.replaceOrCreate__put_Conversations
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Conversation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Conversation'
      deprecated: false
    get:
      tags:
        - Conversation
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Conversation.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Conversation'
      deprecated: false
  /Conversations/replaceOrCreate:
    post:
      tags:
        - Conversation
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Conversation.replaceOrCreate__post_Conversations_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Conversation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Conversation'
      deprecated: false
  /Conversations/upsertWithWhere:
    post:
      tags:
        - Conversation
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Conversation.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Conversation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Conversation'
      deprecated: false
  '/Conversations/{id}/exists':
    get:
      tags:
        - Conversation
      summary: Check whether a model instance exists in the data source.
      operationId: 'Conversation.exists__get_Conversations_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Conversations/{id}':
    head:
      tags:
        - Conversation
      summary: Check whether a model instance exists in the data source.
      operationId: 'Conversation.exists__head_Conversations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Conversation
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Conversation.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Conversation'
      deprecated: false
    put:
      tags:
        - Conversation
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Conversation.replaceById__put_Conversations_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Conversation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Conversation'
      deprecated: false
    delete:
      tags:
        - Conversation
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Conversation.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Conversation
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Conversation.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Conversation id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Conversation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Conversation'
      deprecated: false
  '/Conversations/{id}/replace':
    post:
      tags:
        - Conversation
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Conversation.replaceById__post_Conversations_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Conversation'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Conversation'
      deprecated: false
  /Conversations/findOne:
    get:
      tags:
        - Conversation
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Conversation.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Conversation'
      deprecated: false
  /Conversations/update:
    post:
      tags:
        - Conversation
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Conversation.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Conversation'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Conversations/count:
    get:
      tags:
        - Conversation
      summary: Count instances of the model matched by where from the data source.
      operationId: Conversation.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Conversations/change-stream:
    post:
      tags:
        - Conversation
      summary: Create a change stream.
      operationId: Conversation.createChangeStream__post_Conversations_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Conversation
      summary: Create a change stream.
      operationId: Conversation.createChangeStream__get_Conversations_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
tags:
  - name: Message
  - name: Product
  - name: News
  - name: Category
  - name: Account
  - name: AccountToken
  - name: Conversation
consumes:
  - application/json
  - application/x-www-form-urlencoded
  - application/xml
  - text/xml
produces:
  - application/json
  - application/xml
  - text/xml
  - application/javascript
  - text/javascript
definitions:
  x-any:
    properties: {}
  Conversation:
    properties:
      name:
        type: string
      status:
        type: boolean
      id:
        type: number
        format: double
    additionalProperties: false
  Message:
    properties:
      content:
        type: string
      status:
        type: string
      id:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      conversationId:
        type: number
        format: double
    additionalProperties: false
  Category:
    properties:
      name:
        type: string
      description:
        type: string
      image:
        type: string
      id:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  Product:
    properties:
      name:
        type: string
      images:
        type: array
        items:
          type: string
      description:
        type: string
      id:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
      categoryId:
        type: number
        format: double
    additionalProperties: false
  News:
    properties:
      id:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    additionalProperties: false
  Role:
    properties:
      id:
        type: number
        format: double
      name:
        type: string
      description:
        type: string
      created:
        type: string
        format: date-time
      modified:
        type: string
        format: date-time
    required:
      - name
    additionalProperties: false
  RoleMapping:
    description: Map principals to roles
    properties:
      id:
        type: number
        format: double
      principalType:
        description: >-
          The principal type, such as USER, APPLICATION, ROLE, or user model
          name in case of multiple user models
        type: string
      principalId:
        type: string
      roleId:
        type: number
        format: double
    additionalProperties: false
  AccountToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  Account:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
      createdAt:
        type: string
        format: date-time
      updatedAt:
        type: string
        format: date-time
    required:
      - email
    additionalProperties: false
